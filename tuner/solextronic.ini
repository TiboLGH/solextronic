;-------------------------------------------------------------------------------

; #alert "alert text goes here - if uncommented, it will be displayed in a pop-up dialog  whever a project using this INI is opened"
; INI date: Dec.28/2010 11:25PM PT

[MegaTune]
   MTversion      = 2.25 ; MegaTune itself; needs to match exec version.

   versionInfo    = "S"  ; Put this in the title bar.
   queryCommand   = "Q"  ; Verify against signature.
   signature      = "MSII Rev 2.90500   " ; MS-II sends a null at 20th byte.
                   ; 123456789.123456789.

;-------------------------------------------------------------------------------
;
; PREAMBLE
;
; There are several main sections (with brackets around the [section] heading) in this INI file:
;
; - Constants - this is divided into two pages (for recent MS-II code versions, 
;               at least). Page 1 is based on the source code inpram. structure
;               Page 2 is based on the source code in2ram. structure. All of the 
;               values are inputs sent from MegaTune to the MegaSquirt-II
; - Menu (& User Defined) - these define most of the mennus in MegaTune (except 
;                           those that are 'built-in' like the accel wizrd, etc.)
; - Curve Editor and Table Editor
; - Gauge Configuration
; - Front Page & RuntTime & Tuning Config
; - Burst Mode Config
; - Output Channels - this mirrors the outpc. structure from the source code. All 
;                     of the values are sent from MegaSquirt-II to MegaTune on the PC.
; - Datalog - select output channels to log on the PC hard drive
;
; Note: 
;       - To add an input variable to MegaTune, you need to add it to the inpram (or in2ram) 
;         structure in the MegaSquirt source code noting the correct offset (and recompile, 
;         of course), to the Constants section, and to one of the menus.
;       - To add an output variable to MegaTune (for monitoring, logging, or switching purposes),
;         you need to add it to the outpc structure in the source code, to the OuptChannels, and 
;         to the datalog section (and/or the gauge configurations, if you wish to see it directly 
;         in MegaTune). 
;
; In general, the respective notation for variables from the source code to the INI are:
;
;                         signed          unsigned      bytes    bits
;                         ------          --------      -----    ----
;             - char =      S08              U08          1       8
;             - int  =      S16              U16          2       16
;             - long =      S32              U32          4       32
;
; Where the maximum range is:
;
;                         signed           unsigned
;                         ------           --------
;             - char =   -128 to 127       0 to 255
;             - int  =   -32768 to 32767   0 to 65535
;             - long =   -2147483648       0 to 4294967295        
;                         to 2147483647
;
;----------------------------------------------------------------------------
; Temperature Limits and Settings Reference
;----------------------------------------------------------------------------

#unset EXPANDED_CLT_TEMP ; "Expanded Coolant Temperature Range"

; Below is a listing of all of the temperature ranges used throughout the INI for the MegaSquirt II.
;
; CELSIUS (Expanded/Normal):
;     Low limit: -40C/-40C
;     High limit: 300C/150C
;     Low danger: 65C/10C
;     Low warning: 93C/65C
;     High warning: 162C/93C
;     High danger: 176C/104C
;
; FAHRENHEIT (Expanded/Normal):
;     Low Limit: -40F/-40F
;     High limit: 600F/300F
;     Low danger: 150F/50F
;     Low warning: 200F/150F
;     High warning: 325F/200F
;     High danger: 350F/220F
;----------------------------------------------------------------------------

[ReferenceTables]

    tableWriteCommand 	= "t" ; 
    


[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ; I've got no good way to handle a few of these things yet.
   ;
   ; Temperatures are fine, check out the Fielding IAC example (fastIdleTemp).
   ;
   ; The TPS stuff is a problem, because we have to modify the INI file for
   ; each TPS installation and again whenever we move the TPS...
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is laid
   ; out as follows:
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ;----------------------------------------------------------------------------

   pageActivationDelay =  50 ; Milliseconds delay after burn command.
   blockReadTimeout    = 200 ; Milliseconds total timeout for reading page.

   endianness          = little
   nPages              = 1
   pageSize            = 319
   pageIdentifier      = "\x00"
   burnCommand         = "b"
   pageReadCommand     = "r%2o%2c"
   pageValueWrite      = "w%2o%2c%v"
   pageChunkWrite      = "w%2o%2c%v"
   interWriteDelay     = 15 

   page = 1
   ;  name            = class,  type, offset,      shape,  units,       scale, translate,    lo,      hi, digits
	wheelImpulse	= scalar,	U08,	0,		" ",	1.00000,	0.00000,	0.00,	5.00,	0 ;	number of impulsion for a wheel rotation 
	timerLed    	= scalar,	U16,	1,		"ms",	1.00000,	0.00000,	0.00,	65535.00,	0 ;	internal timer 
	wheelSize   	= scalar,	U08,	3,		"m",	0.01000,	0.00000,	1.00,	2.55,	2 ;	distance run in one wheel rotation 
	PMHOffset   	= scalar,	U08,	4,		"deg",	1.00000,	0.00000,	0.00,	255.00,	0 ;	PMH offset in deg 
	maxRPM      	= scalar,	U16,	5,		"RPM",	1.00000,	0.00000,	0.00,	16000.00,	0 ;	RPM limitation, 0 if no limit 
	maxTemp     	= scalar,	U08,	7,		"degC",	1.00000,	0.00000,	0.00,	200.00,	0 ;	overheating threshold, 0 if no limit 
	minBat      	= scalar,	U08,	8,		"v",	0.10000,	0.00000,	7.00,	12.00,	1 ;	alarm on low battery 
	tpsMin      	= scalar,	U08,	9,	  "ADC",	1.00000,	0.00000,	0.00,	255.00,	0 ;	minimum value of TPS ADC 
	tpsMax      	= scalar,	U08,	10,	  "ADC",	1.00000,	0.00000,	0.00,	255.00,	0 ;	maximum value of TPS ADC 
	battRatio   	= scalar,	U08,	11,		" ",	1.00000,	0.00000,	0.00,	255.00,	0 ;	ratio for the battery ADC in 1/256 
	ignDuration 	= scalar,	U16,	12,		"us",	1.00000,	0.00000,	0.00,	1000.00,	0 ;	ignition duration 
	ignOverheat 	= scalar,	U08,	14,		"deg",	1.00000,	0.00000,	0.00,	20.00,	0 ;	advance decrease in case of overheating 
	noSparkAtDec	= bits,		U08,	15, [0:0], "spark at dec", "no spark at dec";	1 to stop ignition when deceleration 
	injOpen     	= scalar,	U16,	16,		"us",	1.00000,	0.00000,	200.00,	2000.00,	0 ;	time to open injector 
	injStart    	= scalar,	U16,	18,		"us",	1.00000,	0.00000,	200.00,	2000.00,	0 ;	injector opening duration 
	holdPWM     	= scalar,	U08,	20,		"%",	1.00000,	0.00000,	10.00,	100.00,	0 ;	PWM ratio during hold time 
	injRate     	= scalar,	U16,	21,		"g/min",	1.00000,	0.00000,	50.00,	500.00,	0 ;	flow rate of injector 
	injAdv      	= scalar,	U08,	23,		"deg",	1.00000,	0.00000,	0.00,	255.00,	0 ;	mean injection advance 
	targetAfr   	= scalar,	U08,	24,		" ",	0.10000,	0.00000,	7.00,	20.00,	1 ;	target Air Fuel ratio 
	starterInj  	= scalar,	U16,	25,		"us",	1.00000,	0.00000,	200.00,	5000.00,	0 ;	injection duration during crancking 
	starterAdv  	= scalar,	U08,	27,		"deg",	1.00000,	0.00000,	0.00,	255.00,	0 ;	advance during crancking 
	injOverheat 	= scalar,	U08,	28,		"%",	1.00000,	0.00000,	0.00,	50.00,	0 ;	injection increase in case of overheating 
	noInjAtDec  	= bits,		U08,	29, [0:0], "inj at dec", "no inj at dec";	1 to stop injection when deceleration 
	ignPolarity 	= bits,		U08,	30, [0:0], "Active on low", "Active on high";	0 active at low state 
	injPolarity 	= bits,		U08,	31, [0:0], "Active on low", "Active on high";	0 active at low state 
	pmhPolarity 	= bits,		U08,	32, [0:0], "Active on low", "Active on high";	0 active at low state 
	pumpPolarity	= bits,		U08,	33, [0:0], "Active on low", "Active on high";	0 active at low state 
	injTestPW   	= scalar,	U16,	34,		"us",	1.00000,	0.00000,	200.00,	10000.00,	0 ;	pulse width of injector test mode 
	injTestCycles	= scalar,	U16,	36,		" ",	1.00000,	0.00000,	0.00,	1000.00,	0 ;	number of cycle of injector test mode. 0 to stop 
	ignTestMode 	= bits,		U08,	38, [0:0], "disable test mode", "Enable test mode";	Enable/disable of ignition test mode 
	rpmBins     	= array,	U16,	39,	[10],	"RPM",	1.00000,	0.00000,	0,	10000,	0 ;	table of RPM indexes 
	loadBins    	= array,	U08,	59,	[10],	"%",	1.00000,	0.00000,	0,	100,	0 ;	table of load/MAF indexes 
	injTable    	= array,	U08,	69,	[10x10],	"%",	1.00000,	0.00000,	10,	130,	0 ;	table for injection 
	ignTable    	= array,	U08,	169,	[10x10],	"deg",	1.00000,	0.00000,	0,	200,	0 ;	table for ignition 
	iatCal      	= array,	U08,	269,	[10x2],	"deg",	1.00000,	0.00000,	0,	255,	0 ;	conversion table for IAT sensors 
	cltCal      	= array,	U08,	289,	[10x2],	"deg",	1.00000,	0.00000,	0,	255,	0 ;	conversion table for CLT sensors 
	map0        	= scalar,	U08,	309,		"kpa",	1.00000,	0.00000,	0.00,	255.00,	0 ;	MAP sensor pressure at 0v 
	map5        	= scalar,	U08,	310,		"kpa",	1.00000,	0.00000,	0.00,	255.00,	0 ;	MAP sensor pressure at 5v 
	lapLength   	= scalar,	U16,	311,		"m",	1.00000,	0.00000,	1.00,	65535.00,	0 ;	lap length in meter 
	user1       	= scalar,	U16,	313,		" ",	1.00000,	0.00000,	0.00,	1000.00,	0 ;	for debug 
	user2       	= scalar,	U16,	315,		" ",	1.00000,	0.00000,	0.00,	1000.00,	0 ;	for debug 
	user3       	= scalar,	U16,	317,		" ",	1.00000,	0.00000,	0.00,	1000.00,	0 ;	for debug 

;----------------------------------------------------------------------------------------------------------------------------------------

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;     std_accel
   ;
   ;     std_separator
   ;
   ;  Additionally, to support MegaSquirt-II firmware, there are two standard
   ;  dialogs to generate its three embedded tables.  The first of these acts
   ;  like Roger Enns' EasyTherm, but only works for MS-II.  The second one
   ;  generates the internal AFR table required for proper closed loop operation
   ;  in MS-II.  Use these without page numbers, as they will just be ignored
   ;  in any case.
   ;
   ;     std_ms2gentherm
   ;     std_ms2geno2
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

   menuDialog = main
      menu = "General &Set-Up"
         subMenu = generalSettings, "&General"
         subMenu = limitation,      "&Limitation",                    0,  { }
   
   menuDialog = main
      menu = "Fuel &Set-Up"
         subMenu = injSettings,     "I&njection Settings",             0,  { }
         subMenu = injChars,        "I&njector Characteristics",       0,  { }
         subMenu = injTableTbl,     "&VE Table (MAP/Load)",            0,  { }

   menuDialog = main
       menu = "&Ignition Set-Up"
         subMenu = ignitionOptions, "&Base Ignition Settings",         0,  { }
         subMenu = ignitionTbl,     "&Spark Advance Table (MAP/Load)", 0,  { }

   menuDialog = injTableTbl
      menu = "&Edit Bins"
        subMenu = fmapTableBins,   "Edit &Load Bins"
	    subMenu = frpmTableBins,   "Edit &RPM Bins"

   menuDialog = main
      menu = "&Tuning"
         subMenu = std_realtime,    "&Realtime Display",              0,  { }
         subMenu = std_separator    ;----------------------------------------------
         subMenu = injTableMap,     "VE &Table (MAP/Load)",           0, { }
         subMenu = ignitionMap,     "I&gnition Advance Table (MAP/Load)",    0, { }

   menuDialog = main
      menu = "T&ools"
         subMenu = std_ms2gentherm, "Calibrate T&hermistor Tables...",0,  { }
         subMenu = sensorCal,       "&Sensor Calibration...",         0,  { }
	     subMenu = test_mode,       "&Test Mode",                     0,  { }

   menu = "Help"
         subMenu = helpGeneral,     "Solextronic &Info"
         subMenu = sensorHelp,      "&Sensor Calibration"
         subMenu = burnHelp,        "&Burning Values to ECU"

;-------------------------------------------------------------------------------

[UserDefined]

   dialog = generalSettings, "General Settings"
      topicHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#sg"
      field = "Ignition Polarity",  ignPolarity
      field = "Injection Polarity", injPolarity
      field = "Trigger Polarity",   pmhPolarity
      field = "Pump Polarity",      pumpPolarity
      field = "Wheel size",         wheelSize
      field = "Wheel impulses",     wheelImpulse
      field = "Battery coversion",  battRatio
      field = "Lap length",         lapLength
      field = "Led blinking",       timerLed
      field = "User defined 1",     user1
      field = "User defined 2",     user2
      field = "User defined 3",     user3

   dialog = limitation, "Limitations"
      topicHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#sr"
      field = "Rev Limit",                   maxRPM
      field = "Temperature Limit",           maxTemp
      field = "Min battery level",           minBat

   dialog = injChars, "Injector Characteristics"
      topicHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#sn"
      field = "Injector Open Time",         injOpen
      field = "Hold PWM ",                  holdPWM
      field = "Injector Flow Rate",         injRate,
      field = "Injection Timing Delay",     injStart

   dialog = injSettings,     "I&njection Settings"
      topicHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#sn"
      field = "Target AFR",                 targetAfr
      field = "Cranking pulse width",       starterInj
      field = "Injection advance",          injAdv
      field = "Extra injection for overheating", injOverheat
      field = "No Injection at decceleration", noInjAtDec

   dialog = ignitionOptions, "Base Ignition Settings"
      topicHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#ib"
      field = "#General Ignition"
      field = "Trigger Offset",            PMHOffset
      field = "Cranking advance",          starterAdv 
      field = "Spark Output",              ignPolarity
      field = "Pulse duration",            ignDuration
      field = "Retard for overheating",    ignOverheat
      field = "Ignition at deceleration",  noSparkAtDec 

 
   dialog = sensorCal, "Sensor Calibration"
      topicHelp = sensorHelp
      field = "#MAP Sensor (F1 for common values)"
      field =    "Value at 0.0 volts",   map0
      field =    "Value at 5.0 volts",   map5

   dialog = test_mode, "Test Mode"
      topicHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#oi"
      field = "Injector test squirts",  injTestCycles,
      field = "Injector test PW",  injTestPW,
      field = "Ignition test",  ignTestMode,

   dialog = frpmTableBins, "RPM Table Bins for Fuel Tables"
      topicHelp="http://github.com/TiboLGH/solextronic/wiki/firmware#"
      array1D   = "", "Fuel RPM  %INDEX% ", rpmBins
      field = "#Close and re-open Table(s) to see changes"

   dialog = fmapTableBins, "MAP Table Bins for Fuel Table(s)"
      topicHelp="http://github.com/TiboLGH/solextronic/wiki/firmware#"
      array1D   = "", "Fuel MAP  %INDEX% ", loadBins
      field = "#Close and re-open Table(s) to see changes"

   help = burnHelp, "Burning Values to ECU"
      webHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware"
      text = "Occassionally, you may have trouble getting values to 'stick'"
      text = "in MegaTune. There are a few things you can try if this happens:<br><br>"
      text = "\tHit TAB after entering the value. This forces MegaTune to" 
      text = "recognize the changed value.<br>" 
      text = "\tThen 'Burn to ECU'<br><br>"	
      text = "If that doesn't work:<br><br>"	
      text = "\tChange the value (as above) and immediately save the MSQ file ('File/Save').<br>"
      text = "\tThen reload the file you just saved, and burn it when prompted.<br><br>"
      text = "This forces all the values to be burned to both flash and RAM memory, and"
      text = "should solve the problem."	
   
   help = sensorHelp, "Sensor Calibration"
      webHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware#os"
      text = "MAP Sensor Calibration<br>"
      text = "<br>"
      text = "For the\tMPX4115   use\t10.6 and \t121.7<br>"
      text = "\tMPX4250\t\t10.0\t260.0<br>"
      text = "\tMPXH6300\t1.1\t315.5<br>"
      text = "\tGM 3-BAR\t1.1\t315.5<br>"
      text = "\tMPXH6400\t3.5\t416.5<br>"
      text = "<br>"
      text = "(GM 3-bar data from Dave Hartnell, http://www.not2fast.com/electronics/component_docs/MAP_12223861.pdf)<br>"
      text = "<br>"
      text = "\tSensor type\tvLo\tpLo\tvHi\tpHi\tvRef<br>"
      text = "\tMPX4115 \t0.204 v\t15 kPa\t4.794 v\t115 kPa\t5.100 v<br>"
      text = "\tMPX4250 \t0.204 v\t20 kPa\t4.896 v\t250 kPa\t5.100 v<br>"
      text = "\tMPXH6300\t0.306 v\t20 kPa\t4.913 v\t304 kPa\t5.100 v<br>"
      text = "\tGM 3-BAR\t0.631 v\t40 kPa\t4.914 v\t304 kPa\t5.100 v<br>"
      text = "\tMPXH6400\t0.200 v\t20 kPa\t4.800 v\t400 kPa\t5.000 v<br>"
      text = "<br>"
      text = "In general, use values derived from these equations:<br>"
      text = "<br>"
      text = "\tm = (pHi-pLo)/(vHi-vLo)<br>"
      text = "\tpv1 = pLo - m * vLo<br>"
      text = "\tpv2 = pv1 + m * vRef<br>"
      text = "<br>"
      text = "References:<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPX4115A.pdf<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPX4250A.pdf<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPXH6300A.pdf<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPXH6400A.pdf<br>"
      text = "<br>"
      text = "Barometer Sensor Calibration<br>"
      text = "<br>"
      text = "If your system has an external barometer sensor, separate from the MAP"
      text = "sensor, then use these values to calibrate it properly.  If you have"
      text = "a standard MS installation, then copy your MAP sensor values here.<br>"
      text = "<br>"
      text = "Barometric Correction Calibration<br>"
      text = "<br>"
      text = "Correction for barometric effects is performed using the linear function below.<br>"
      text = "<br>"
      text = "\tcorrection = correction_0 + (rate * barometer) / 100<br>"
      text = "<br>"
      text = "'At total vacuum' contains the total correction at a barometer reading"
      text = "of 0 kPa (you are on the moon).  The 'Rate' contains the percentage per 100"
      text = "kPa to scale the barometer value.  Using the default values of 147 and -47,"
      text = "we see that for a barometer of 100 kPa, we have 100% correction.<br>"
      text = "<br>"
      text = "\tcorrection = 147 + (-47*100) / 100 = 100%"


   help = helpGeneral, "Solextronic General Info"
      webHelp = "http://github.com/TiboLGH/solextronic/wiki/firmware"
      text = "Al Grippo and Bruce Bowling have created MegaSquirt-II, which"
      text = "is a plug-in daughter card that replaces the 8-bit MC68HC908GP32"
      text = "with a 16-bit MC9S12C64 processor."
      text = "<br>"
      text = "It is basically a plug-in processor card that has the MC9S12C64"
      text = "processor plus support hardware as well as a stepper motor chip,"
      text = "and an ignition module controller.  The embedded code is written"
      text = "in C, rather than assembly language, so it should be more accessible"
      text = "to more programmers (Stephane Carrez has ported GCC to the HC12"
      text = "processor so, although it doesn't use the full 9S12 instruction"
      text = "set, we are able to use his version to write code for the MS-II).<br>"
      text = "<br>"
      text = "For current documentation, click the Web Help button below, or for"
      text = "support questions visit http://www.msefi.com/."

;-------------------------------------------------------------------------------

[CurveEditor]

	  
[TableEditor]

   table = injTableTbl, injTableMap, "VE Table (MAP/load)", 2
     topicHelp   = "http://github.com/TiboLGH/solextronic/wiki/firmware#a1"
      ;             constant,   variable
      xBins       = rpmBins, rpm,   readonly
      yBins       = loadBins, load, readonly
      zBins       = injTable

      upDownLabel = "RICHER", "LEANER"
      gridHeight  = 2.0
      gridOrient  = 250,   0, 340 ; Space 123 rotation of grid in degrees.


   table = ignitionTbl, ignitionMap, "Spark Advance Table", 2
     topicHelp   = "http://github.com/TiboLGH/solextronic/wiki/firmware#ap"
      xBins       = rpmBins, rpm, readonly
      yBins       = loadBins, load, readonly
      zBins       = ignTable
      upDownLabel = "ADVANCING", "RETARDING"
      gridHeight  = 3.0
      gridOrient  = 250,   0, 340

;-------------------------------------------------------------------------------

[GaugeConfigurations]

   ;-------------------------------------------------------------------------------
   ;  Notes on some of the gauges.
   ;
   ;  The accelEnrichGauge is now a composite of both acceleration enrichment
   ;  and deceleration enleanment numbers.  See the definition of the variable
   ;  accDecEnrich in the OutputChannels section.
   ;
   ;  David Hooke contributed the lambda gauge and associated transfer
   ;  function files.
   ;
   ;  The lambda gauge is the best way (my opinion) to report data from a
   ;  wide band EGO gauge, it standardizes the output irrespective of fuel
   ;  or mix of fuels, so you needn't do any brainwork to know if your 75%
   ;  gasoline and 25% methanol is rich at 10:1 or not.
   ;
   ;  Use the file WBlambda100AVR.inc, if using a standard ADC (e.g., AVR cpu).
   ;  Use the file WBlambda100MOT.inc, if using a biased ADC (e.g., MOT cpu).
   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.

   ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld

   advdegGauge       = advance,       "Ignition Advance",   "degrees", 0,    30,    -1,     -1,  999,  999, 1, 1
   loadGauge         = load,          "Table Load Index",   "kPa",     0,   255,      0,    20,  200,  245, 1, 0
   mapGauge          = MAP,           "Engine MAP",         "kPa",     0,   255,      0,    20,  200,  245, 1, 0
   pulseWidthGauge   = injPulseWidth, "Pulse Width"  ,      "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 3, 1
   tachometer        = rpm,           "Engine Speed",       "RPM",     0,  8000,    300,   500, 5000, 6000, 0, 0
   speedometer       = speed,         "Solex Speed",        "km/h",    0,   120,      0,     0,  100,  110, 0, 0
   throttleGauge     = TPS,           "Throttle Position",  "%",       0,   100,     -1,     1,   90,  100, 0, 0
   voltMeter         = battery,       "Battery Voltage",    "volts",   7,    21,     9,    10,   16,   17, 2, 2
   cltGauge          = coolant,       "Coolant Temp",       "C",     -40,   120,    -15,     0,   95,  105, 0, 0
   iatGauge          = mat,           "Intake Air Temp",    "C",     -40,   110,    -15,     0,   95,  100, 0, 0

;-------------------------------------------------------------------------------

[FrontPage]
   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8

   gauge1 = tachometer
   gauge2 = throttleGauge
   gauge3 = pulseWidthGauge 
   gauge4 = speedometer
   gauge5 = mapGauge
   gauge6 = advdegGauge
   gauge7 = iatGauge
   gauge8 = cltGauge


   ;----------------------------------------------------------------------------
   ; Indicators
   ;               expr         off-label          on-label, off-bg, off-fg, on-bg, on-fg
   ;   indicator = { tpsaen }, "Not Accelerating", "AE",     cyan,   white,  red,   black
   ;
   ; Look in the new colorScheme.ini for the basic ones, add more or tell me what to add.

   indicator = { engineState == 1   }, "Not Cranking", "Cranking",    white, black, black, white
   indicator = { engineState == 4   }, "Normal",      "Overheat !",   white, black, red,   black
   indicator = { engineState == 8   }, "Normal",      "Error !",      white, black, red,   black
   indicator = { battery < 10.5 }, "Battery OK",  "Battery LOW",      green, black, red,   black
   indicator = { engineState == 32 }, "No test",  "Ignition test on-going",  white, black, red,   black
   indicator = { engineState == 64 }, "No test",  "Injection test on-going", white, black, red,   black

;-------------------------------------------------------------------------------

[RunTime]
   barHysteresis = 2.5 ; Seconds
   coolantBar    = -40,  300
   matBar        = -40,  100
   batteryBar    =   6,   15
   dutyCycleBar  =   0,  100
   mapBar        =   0,  255
   pulseWidthBar =   0, 25.5
   rpmBar        =   0, 8000
   throttleBar   =   0,  100
   veCorrBar     =   0,  200

;-------------------------------------------------------------------------------

[Tuning]

;  font            = "Lucida Console", 12
;  font            = "Courier", 14
   spotDepth       =   2 ; 0 = no indicators, 1 = Z only, 2 = XYZ indicators.
   cursorDepth     =   2 ; Same as spot depth.

   ; The four radio buttons on the tuning screen select a "page" of six
   ; gauges.  The gauge numbering is the same as the front page, across
   ; then down.
   ;             1  2
   ;             3  4
   ;             5  6
   ;
   ; gaugeColumns allows you to hide or show gauges in column 2 (i.e.,
   ; gauges 2, 4 and 6).

   gaugeColumns = 2 ; Only 1 or 2 are valid.

   ;              Page 1            Page 2             Page 3            Page 4
   pageButtons  = "&EGO",           "&WUE",            "PW&1",           "PW&2"
   gauge1       = tachometer,       tachometer,        tachometer,       tachometer
   gauge2       = mapGauge,         mapGauge,          mapGauge,         mapGauge
   gauge3       = cltGauge,         cltGauge,          cltGauge,         cltGauge
   gauge4       = iatGauge,         iatGauge,          pulseWidthGauge , pulseWidthGauge 
   gauge5       = throttleGauge,    throttleGauge,     throttleGauge,    throttleGauge
   gauge6       = loadGauge,        loadGauge,         loadGauge,        loadGauge

;-------------------------------------------------------------------------------

[AccelerationWizard]
   tpsDotBar = 0, 100
   mapDotBar = 0, 200

;-------------------------------------------------------------------------------

[BurstMode]
   getCommand       = "A"

[OutputChannels]
   deadValue        = { 0 } ; Convenient unchanging value.

   ochBlockSize     = 38
   ochGetCommand    = "A" 

	rawBattery  	= scalar,	U08,	0,		" ",	1.00000,	0.00000 ;	raw ADC for battery 
	rawClt      	= scalar,	U08,	1,		" ",	1.00000,	0.00000 ;	raw ADC for CLT 
	rawIat      	= scalar,	U08,	2,		" ",	1.00000,	0.00000 ;	raw ADC for IAT 
	rawTps      	= scalar,	U08,	3,		" ",	1.00000,	0.00000 ;	raw ADC for TPS 
	rawMap      	= scalar,	U08,	4,		" ",	1.00000,	0.00000 ;	raw ADC for Map 
	battery     	= scalar,	U08,	5,		"v",	0.10000,	0.00000 ;	battery voltage 
	CLT         	= scalar,	U08,	6,		"deg",	1.00000,	0.00000 ;	motor temperature 
	IAT         	= scalar,	U08,	7,		"deg",	1.00000,	0.00000 ;	air temperature 
	TPS         	= scalar,	U08,	8,		"%",	1.00000,	0.00000 ;	throttle open ratio 
	MAP         	= scalar,	U08,	9,		"kPa",	1.00000,	0.00000 ;	manifold pressure 
	TPSVariation	= scalar,	S08,	10,		"%/10ms",	1.00000,	0.00000 ;	TPS variation speed 
	rpm         	= scalar,	U16,	11,		"RPM",	1.00000,	0.00000 ;	engine speed 
	speed       	= scalar,	U16,	13,		"km/h",	1.00000,	0.00000 ;	solex speed 
	engineState 	= scalar,	U08,	15,		"bit",	1.00000,	0.00000 ;	engine state 
	cranking        = 	 bits,	U08,	15, [0:0]
	running         = 	 bits,	U08,	15, [1:1]
	overheat        = 	 bits,	U08,	15, [2:2]
	error           = 	 bits,	U08,	15, [3:3]
	stalled         = 	 bits,	U08,	15, [4:4]
	test_ign        = 	 bits,	U08,	15, [5:5]
	test_inj        = 	 bits,	U08,	15, [6:6]
	TPSState    	= scalar,	U08,	16,		"bit",	1.00000,	0.00000 ;	TPS state 
	idle            = 	 bits,	U08,	16, [0:0]
	wot             = 	 bits,	U08,	16, [1:1]
	opening         = 	 bits,	U08,	16, [2:2]
	closing         = 	 bits,	U08,	16, [3:3]
	injPulseWidth	= scalar,	U16,	17,		"us",	1.00000,	0.00000 ;	Injector active time 
	injStart    	= scalar,	U16,	19,		"deg",	1.00000,	0.00000 ;	Injector start time before PMH 
	advance     	= scalar,	U08,	21,		"deg",	1.00000,	0.00000 ;	Spark advance in deg before PMH 
	second      	= scalar,	U16,	22,		"sec",	1.00000,	0.00000 ;	Current time in sec : will be set only when asked by UART command 
	injTestMode 	= scalar,	U08,	24,		" ",	1.00000,	0.00000 ;	current injector test mode 
	injTestCycles	= scalar,	U16,	25,		" ",	1.00000,	0.00000 ;	current injector test cycles 
	load        	= scalar,	U08,	27,		"%",	1.00000,	0.00000 ;	current load 
	ignOffset   	= scalar,	S08,	28,		"deg",	1.00000,	0.00000 ;	ignition offset adjustable runtime 
	injOffset   	= scalar,	S16,	29,		"us",	1.00000,	0.00000 ;	injection duration offset adjustable runtime 
	injStartOffset	= scalar,	S08,	31,		"deg",	1.00000,	0.00000 ;	injection start offset adjustable runtime 
	debug1      	= scalar,	U16,	32,		"%",	1.00000,	0.00000 ;	debug for user 
	debug2      	= scalar,	U16,	34,		"%",	1.00000,	0.00000 ;	debug for user 
	debug3      	= scalar,	U16,	36,		"%",	1.00000,	0.00000 ;	debug for user 
    
    time            = { timeNow                                        }, "s"
    tpsADC          = { rawTps }, "ADC" ; Fake for TPS setting assistant 
    mat             = { IAT }
    coolant         = { CLT }

;-------------------------------------------------------------------------------
;--  The entries are saved in the datalog file in the order in which they     --
;--  appear in the list below.                                                --
;--                                                                           --
;--   Channel - Case sensitive name of output channel to be logged.           --
;--   Label   - String written to header line of log.  Be careful             --
;--             about changing these, as programs like MSLVV and              --
;--             MSTweak key off specific column names.                        --
;--   Type    - Data type of output, converted before writing.                --
;--   Format  - C-style output format of data.                                --

[Datalog]
   ;       Channel          Label          Type    Format
   ;       --------------   ----------     -----   ------
   entry = time,            "Time",        float,  "%.3f"
   entry = second,          "SecL",        int,    "%d"
   entry = rpm,             "RPM",         int,    "%d"
   entry = MAP,             "MAP",         float,  "%.1f"
   entry = load,            "Load",        float,  "%.1f"
   entry = TPS,             "TPS",         float,  "%.1f"
   entry = battery,         "vBatt",       float,  "%.2f"
   entry = IAT,             "IAT",         float,  "%.1f"
   entry = CLT,             "CLT",         float,  "%.1f"
   entry = engineState,     "Engine",      int,    "%d"
   entry = injPulseWidth,   "PW",          float,  "%.3f"
   entry = advance,         "SparkAdv",    float,  "%.1f"
   
;-------------------------------------------------------------------------------
